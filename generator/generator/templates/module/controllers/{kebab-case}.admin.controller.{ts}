import {
    Controller,
    Get,
    Post,
    Delete,
    NotFoundException,
    Param,
    Patch,
    Body,
    Query,
    SerializeOptions,
  } from '@nestjs/common';
  import { ApiTags } from '@nestjs/swagger';
  import { ADMIN_ONLY_GROUP } from 'src/common/database/constant/serialization-group.constant';
  import { ApiDocs } from 'src/common/doc/common-docs';
  import { PaginateQueryDto } from 'src/common/doc/query/paginateQuery.dto';
  import { ResponseMessage } from 'src/common/response/decorators/responseMessage.decorator';
  import {
    IResponse,
    IResponsePaging,
  } from 'src/common/response/interfaces/response.interface';
  import { {PascalCase}CreateDto } from '../dtos/{kebab-case}.create.dto';
  import { {PascalCase}UpdateDto } from '../dtos/{kebab-case}.update.dto';
  import { {PascalCase}Entity } from '../repository/entities/{kebab-case}.entity';
  import { {PascalCase}Service } from '../services/{kebab-case}.service';
  import { {PascalCase}PaginationSerialization, {PascalCase}Serialization } from '../serializations/{kebab-case}.serialization';
  import { UserProtected } from 'src/common/auth/decorators/auth.decorators';
  import { RequestParamGuard } from 'src/common/request/decorators/request.decorator';
  import { IdParamDto } from 'src/common/dto/id-param.dto';
  import { CustomResponseDecorator } from 'src/common/auth/decorators/custom.response.decorators';
  import { FindAllQueryDto } from 'src/common/doc/query/getAllQuery.dto';
  import { DataSource, FindOptionsWhere, In } from 'typeorm';
  
  
  @SerializeOptions({
    groups: ADMIN_ONLY_GROUP,
  })
  @ApiTags('{PascalCase}')
  @Controller('{kebab-case}')
  export class {PascalCase}AdminController {
    constructor(
      private readonly {camelCase}Service: {PascalCase}Service,
      private connection: DataSource,
  ) {}
  
    @ApiDocs({
      operation: 'Create {PascalCase}.',
      serialization: {PascalCase}Serialization,
    })
    @ResponseMessage('{PascalCase} created successfully.')
    @Post()
    async create(@Body() body: {PascalCase}CreateDto): Promise<IResponse<any>> {
      try {
        const data: {PascalCase}Entity = await this.{camelCase}Service.create(body);
        return { data };
      } catch (error) {
        throw error;
      }
    }
  
  
    @ApiDocs({
      operation: 'List {PascalCase}',
      serialization: {PascalCase}PaginationSerialization,
    })
    @ResponseMessage('{PascalCase} list with pagination retrieved successfully.')
    @Get()
    async list(
      @Query() paginateQueryDto: PaginateQueryDto,
    ): Promise<IResponsePaging<{PascalCase}Entity>> {
      const data = await this.{camelCase}Service.paginatedGet({
        ...paginateQueryDto,
        searchableColumns: ['name'],
        defaultSearchColumns: ['name'],
        defaultSortColumn: 'name',
        sortableColumns: ['createdAt', 'id', 'name'],
        options: {
          where: {},
        },
      });
      return data;
    }
  
    @ApiDocs({
      operation: 'List all {PascalCase} without pagination',
      serialization: {PascalCase}PaginationSerialization,
    })
    @UserProtected()
    @ResponseMessage('{PascalCase} list retrieved successfully.')
    @Get('/all')
    async listAll(
      @Query() findAllQueryDto: FindAllQueryDto,
    ): Promise<IResponse<{PascalCase}Entity[]>> {
      const where: FindOptionsWhere<{PascalCase}Entity> = {};
  
      if (findAllQueryDto.ids?.length > 0) {
        where.id = In(findAllQueryDto.ids);
      }
  
      const data = await this.{camelCase}Service.getAll({
        options: {
          where,
        },
      });
      return { data };
    }
  
  
    @ApiDocs({
      operation: 'Get {PascalCase}',
      serialization: {PascalCase}Serialization,
      params: [
        {
          type: 'number',
          required: true,
          name: 'id',
        },
      ],
    })
    @UserProtected()
    @RequestParamGuard(IdParamDto)
    @ResponseMessage('{PascalCase} retrieved successfully.')
    @Get(':id')
    async getById(@Param('id') id: number): Promise<IResponse<{PascalCase}Entity>> {
      const data = await this.{camelCase}Service.getById(id, {
        options: {
          select: {
            id: true,
            name: true,
          },
        },
      });
      if (!data) throw new NotFoundException('Cannot find {PascalCase}');
      return { data };
    }
  
    @ApiDocs({
      operation: 'Restore {PascalCase}',
      serialization: {PascalCase}Serialization,
      params: [
        {
          type: 'number',
          required: true,
          name: 'id',
        },
      ],
    })
    @UserProtected()
    @CustomResponseDecorator()
    @RequestParamGuard(IdParamDto)
    @ResponseMessage('{PascalCase} restored successfully.')
    @Patch(':id/restore')
    async restoreById(
      @Param('id') id: number,
    ): Promise<IResponse<{PascalCase}Entity>> {
      await this.{camelCase}Service.restore({ where: { id } });
      const data: {PascalCase}Entity | null = await this.{camelCase}Service.getById(id);
      if (!data) throw new NotFoundException('Cannot find {PascalCase}');
      return { data };
    }
  
    @ApiDocs({
      operation: 'Update {PascalCase}',
      serialization: {PascalCase}Serialization,
      params: [
        {
          type: 'number',
          required: true,
          name: 'id',
        },
      ],
    })
    @UserProtected()
    @RequestParamGuard(IdParamDto)
    @ResponseMessage('{PascalCase} updated successfully.')
    @Patch(':id')
    async updateById(
      @Param('id') id: number,
      @Body() update{PascalCase}Data: {PascalCase}UpdateDto,
    ): Promise<IResponse<{PascalCase}Entity>> {
      const queryRunner = this.connection.createQueryRunner();
      await queryRunner.startTransaction();
      try {
        const found: {PascalCase}Entity | null = await this.{camelCase}Service.getById(id);
        if (!found) throw new NotFoundException('Cannot find {PascalCase}');
        await this.{camelCase}Service.update(found, update{PascalCase}Data, {
          entityManager: queryRunner.manager,
        });
        await queryRunner.commitTransaction();
        return await this.getById(id);
      } catch (error) {
        await queryRunner.rollbackTransaction();
        throw error;
      } finally {
        await queryRunner.release();
      }
    }
  
    @ApiDocs({
      operation: 'Delete {PascalCase}',
      serialization: {PascalCase}Serialization,
      params: [
        {
          type: 'number',
          required: true,
          name: 'id',
        },
      ],
    })
    @UserProtected()
    @CustomResponseDecorator()
    @RequestParamGuard(IdParamDto)
    @ResponseMessage('{PascalCase} deleted successfully.')
    @Delete(':id/hard')
    async deleteById(@Param('id') id: number): Promise<IResponse<{PascalCase}Entity>> {
      const queryRunner = this.connection.createQueryRunner();
      await queryRunner.startTransaction();
      try {
        const found: {PascalCase}Entity | null = await this.{camelCase}Service.getById(id);
        if (!found) throw new NotFoundException('Cannot find {PascalCase}');
        const data = await this.{camelCase}Service.delete(found, {
          entityManager: queryRunner.manager,
        });
        await queryRunner.commitTransaction();
        return { data };
      } catch (error) {
        await queryRunner.rollbackTransaction();
        throw error;
      } finally {
        queryRunner.release();
      }
    }
  
    @ApiDocs({
      operation: 'Soft delete {PascalCase}',
      serialization: {PascalCase}Serialization,
      params: [
        {
          type: 'number',
          required: true,
          name: 'id',
        },
      ],
    })
    @UserProtected()
    @CustomResponseDecorator()
    @RequestParamGuard(IdParamDto)
    @ResponseMessage('{PascalCase} soft deleted successfully.')
    @Delete('/:id')
    async softDeleteById(
      @Param('id') id: number,
    ): Promise<IResponse<{PascalCase}Entity>> {
      const queryRunner = this.connection.createQueryRunner();
      await queryRunner.startTransaction();
      try {
        const found: {PascalCase}Entity | null = await this.{camelCase}Service.getById(id);
        if (!found) throw new NotFoundException('Cannot find {PascalCase}');
        const data = await this.{camelCase}Service.softDelete(found, {
          entityManager: queryRunner.manager,
        });
        await queryRunner.commitTransaction();
        return { data };
      } catch (error) {
        await queryRunner.rollbackTransaction();
        throw error;
      } finally {
        await queryRunner.release();
      }
    }
  }
  